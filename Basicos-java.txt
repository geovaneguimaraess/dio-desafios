Desafio
Faça um programa que leia um valor qualquer e apresente uma mensagem dizendo em qual dos seguintes intervalos ([0,25], (25,50], (50,75], (75,100]) este valor se encontra. Caso o valor não esteja em nenhum destes intervalos, deverá ser impressa a mensagem: “Fora de intervalo”.
O símbolo ( representa "maior que". Por exemplo:
[0,25]  indica valores entre 0 e 25.0000, inclusive eles.
(25,50] indica valores maiores que 25 Ex: 25.00001 até o valor 50.0000000
Entrada
O arquivo de entrada contém um número com ponto flutuante qualquer.
Saída
A saída deve ser uma mensagem conforme exemplo abaixo.
 
Exemplo de Entrada	Exemplo de Saída
25.01	Intervalo (25,50]
25.00	Intervalo [0,25]




import java.io.IOException;
import java.util.Scanner;

public class Teste {
    
    public static void main(String[] args) throws IOException {
        Scanner leitor = new Scanner(System.in);
        double valor = leitor.nextDouble();
        if (valor >= 0 && valor <= 25) {
            System.out.println("Intervalo [0,25]"); //intervalo 1
        } else if (valor > 25 && valor <= 50) {
            System.out.println("Intervalo (25,50]"); //intervalo 2
        } else if (valor > 50 && valor <= 75) {
            System.out.println("Intervalo (50,75]");  //intervalo 3
        } else if (valor > 75 && valor <= 100) {
            System.out.println("Intervalo (75,100]"); //intervalo 4
        } else {
            System.out.println("Fora de intervalo"); //fora do intervalo
    }
    } 
}

Com base na tabela abaixo, escreva um programa que leia o código de um item e a quantidade deste item. A seguir, calcule e mostre o valor da conta a pagar.

Entrada
O arquivo de entrada contém dois valores inteiros correspondentes ao código e à quantidade de um item conforme tabela acima.
Saída
O arquivo de saída deve conter a mensagem "Total: R$ " seguido pelo valor a ser pago, com 2 casas após o ponto decimal.
 
Exemplo de Entrada	Exemplo de Saída
3 2	Total: R$ 10.00
4 3	Total: R$ 6.00
2 3	Total: R$ 13.50



import java.util.Scanner;

public class Teste {

	public static void main(String[] args) {
		int X, Y;
		float preco = 0;
		
		Scanner input = new Scanner(System.in);
		X = input.nextInt();
		Y = input.nextInt();
		if (X == 1) {
			preco  = (float) (4.00 * Y); //Total cachorro quente
		}else if (X == 2) {
			preco  = (float) (4.50 * Y);  //Total x-salada
		}else if (X == 3) {
			preco  = (float) (5.00 * Y);  //Total x-bacon 
		}else if (X == 4) {
			preco  = (float) (2.00 * Y); //Total torrada simpres
		}else if (X == 5) {
			preco  = (float) (1.50 * Y); //Total refrigerante
		}
		
		System.out.printf("Total: R$ %.2f\n",preco);
	}

}

Desafio

Imagine o seguinte cenário, você desenvolveu uma máquina de  teletransporte no tempo que pode ser usada no máximo três vezes, e a cada uso da máquina você pode escolher ir para o futuro ou voltar para o passado. A máquina possui três créditos fixos; cada crédito representa uma certa quantidade de anos, e pode ser usado para ir essa quantidade de anos para o passado ou para o futuro. Você pode fazer uma, duas ou três viagens, e cada um desses três créditos pode ser usado uma vez apenas. Por exemplo, se os créditos forem 5, 12 e 9, você poderia decidir fazer duas viagens: ir 5 anos para o futuro e, depois, voltar 9 anos para o passado. Dessa forma, você terminaria quatro anos no passado, em 2012. Também poderia fazer três viagens, todas indo para o futuro, usando os créditos em qualquer ordem, terminando em 2042.
Neste desafio, dados os valores dos três créditos da máquina, seu programa deve dizer se é ou não possível viajar no tempo e voltar para o presente, fazendo pelo menos uma viagem e, no máximo, três viagens; sempre usando cada um dos três créditos no máximo uma vez.
Entrada
A entrada consiste de uma linha contendo os valores dos três créditos A, B e C (1 ≤ A, B, C ≤ 1000).
Saída
Seu programa deve imprimir uma linha contendo o caracter “S” se é poss ível viajar e voltar para o presente, ou “N” caso contrário.
 
Exemplos de Entrada	Exemplos de Saída
22 5 22	S
 
31 110 79	S
 
45 8 7	N


import java.io.IOException;
import java.util.Scanner;

public class Teste {
 
	public static void main(String[] args) throws IOException {
		Scanner leitor = new Scanner(System.in);
		int a = leitor.nextInt();
		int b = leitor.nextInt();
		int c = leitor.nextInt();
		if (a + b == c || a + c == b || b + c == a || a == b || a == c || b == c)  //condição para voltar ao presente
			System.out.println("S");
		else 
			System.out.println("N");
	}
	
}



import java.io.IOException;
import java.util.Scanner;

public class Teste {
 
	public static void main(String[] args) throws IOException {
		Scanner leitor = new Scanner(System.in);
		int a = leitor.nextInt();
		int b = leitor.nextInt();
		int c = leitor.nextInt();
		if (a + b == c || a + c == b || b + c == a || a == b || a == c || b == c)  //condição para voltar ao presente
			System.out.println("S");
		else 
			System.out.println("N");
		}
	}
	
}

Jade ganhou de presente de aniversário um telescópio e ficou muito feliz, pois adora olhar a lua à noite. Ela sempre foi uma estudante muito boa, e só analizando a lua por duas noites seguidas, já consegue identificar as mudanças que ocorreram na iluminação e o percentual aproximado da lua que está iluminada.

Você, que é amigo da Jade e estuda Computação, resolveu fazer um pequeno programa que, baseado nesta avaliação que ela fez nas duas últimas noites, informa a fase na qual a lua se encontra. Se a porção visível da lua no momento estiver entre 0 e 2%, por exemplo, é lua nova, se for entre 3 e 96% é lua crescente, se for entre 97 e 100% é lua cheia e se for entre 96 e 3% (diminuindo) é lua minguante.
Entrada
A entrada é composta por uma única linha contendo dois valores inteiros. O primeiro valor corresponde ao percentual observado por Jade na noite de dois dias atrás. O segundo valor corresponde ao percentual observado por jade na noite anterior.
Saída
Baseado nos dois percentuais observados por Jade, imprima na tela a fase na qual a lua se encontrava na noite anterior, conforme o exemplo abaixo. Não esqueça de imprimir o caractere de fim de linha após a saída :).
 
Exemplo de Entrada	Exemplo de Saída
0 2	nova
2 3	crescente
99 97	cheia
97 94	minguante
30 35	crescente
 
Contest Oficial de Aquecimento da Olimpíada Brasileira de Informática, Fase 2, 2015


import java.util.Scanner;

public class Teste {

    public static void main(String[] args) {
        Scanner leitor = new Scanner(System.in);
        
        int inicio = leitor.nextInt();
        int fim = leitor.nextInt();
        
        if (inicio >= 0 && fim <= 2) { //condição para  ser nova
            System.out.println("nova");
        } else if (fim > inicio && fim <= 96) { // condição para ser crescente
            System.out.println("crescente");
        } else if (inicio >= fim && fim <= 96) { // condição para ser minguante
            System.out.println("minguante");
        } else { 
            System.out.println("cheia");  // quando não atende as condições anteriores é cheia
        }
    }

}

Leia 1 valor inteiro N (2 < N < 1000). A seguir, mostre a tabuada de N:      
1 x N = N      2 x N = 2N        ...       10 x N = 10N
Entrada
A entrada contém um valor inteiro N (2 < N < 1000).
Saída
Imprima a tabuada de N, conforme o exemplo fornecido.
 
Exemplo de Entrada	Exemplo de Saída
140	1 x 140 = 140
2 x 140 = 280
3 x 140 = 420
4 x 140 = 560
5 x 140 = 700
6 x 140 = 840
7 x 140 = 980
8 x 140 = 1120
9 x 140 = 1260
10 x 140 = 1400



import java.io.IOException;
import java.util.Scanner;

public class Teste {
	
	public static void main(String[] args) throws IOException {
    	Scanner leitor = new Scanner(System.in);
    	int N = leitor.nextInt();
    	System.out.println("1 x " + N + " = " + (N * 1));
    	System.out.println("2 x " + N + " = " + (N * 2));
    	System.out.println("3 x " + N + " = " + (N * 3));
    	System.out.println("4 x " + N + " = " + (N * 4));
    	System.out.println("5 x " + N + " = " + (N * 5));
    	System.out.println("6 x " + N + " = " + (N * 6));
    	System.out.println("7 x " + N + " = " + (N * 7));
    	System.out.println("8 x " + N + " = " + (N * 8));
    	System.out.println("9 x " + N + " = " + (N * 9));
    	System.out.println("10 x " + N + " = " + (N * 10));
	}
	
}

Leia quatro valores inteiros A, B, C e D. A seguir, calcule e mostre a diferença do produto de A e B pelo produto de C e D segundo a fórmula: DIFERENCA = (A * B - C * D).
Entrada
O arquivo de entrada contém 4 valores inteiros.
Saída
Imprima a mensagem DIFERENCA com todas as letras maiúsculas, conforme exemplo abaixo, com um espaço em branco antes e depois da igualdade.
 
Exemplos de Entrada	Exemplos de Saída
5
6
7
8	DIFERENCA = -26
0
0
7
8	DIFERENCA = -56
5
6
-7
8	DIFERENCA = 86




import java.io.IOException;
import java.util.Scanner;

public class Desafio {
	
    public static void main(String[] args) throws IOException {
        Scanner leitor = new Scanner(System.in);
        int a = leitor.nextInt();
        int b = leitor.nextInt();
        int c = leitor.nextInt();
        int d = leitor.nextInt();
        int resultado = (a * b - c * d);
        System.out.println("DIFERENCA = " + resultado);
    }
	
}

Como todos sabem, existem diversos heróis que defendem a humanidade de capangas e forças do mal. Em Codham, uma das cidades mais sombrias que existem, vive Batmain, o cavaleiro das trevas. Resumidamente, Batmain nada mais é que um ser humano gênio, multibilionário, filantropo que também é mestre em mais de cem artes marciais. Apesar de ninguém conhecer sua real identidade, por ele utilizar uma armadura com disfarce de morcego, todas as pessoas do bem o amam. Obviamente, as pessoas más o temem. Após diversas batalhas, todos os seus vilões haviam sido capturados pelo Batmain e a sensação de segurança parecia fazer parte dos cidadãos de Codham novamente. Toda essa tranquilidade atípica deixou de existir a dois dias, quando o palhaço do crime – também conhecido como Coderinga – escapou de Arkham e conseguiu tornar a cidade mais caótica do que nunca. Você trabalha para a polícia de Codham, em um reconhecido cargo de batprogramador (profissão responsável por resolver problemas que envolvem o cavaleiro das trevas, realizando a codificação de algoritmos) e lhe foi solicitado a seguinte tarefa: dizer, para cada vilão, se ele alguma vez já foi capturado pelo cavaleiro das trevas.

Entrada
A primeira linha da entrada é composta por um número inteiro T que indica a quantidade de casos de testes. Cada caso de teste é composto por uma cadeia de caracteres de tamanho N (1 < N < 26). Todos os caracteres são letras maiúsculas ou minúsculas do alfabeto inglês.
Saída
Caso o vilão alguma vez já foi capturado pelo Batmain, imprima Y. Caso contrário, imprima N. Nesse caso, por simplicidade, assumiremos que qualquer cadeia de caracteres é um vilão válido e já capturado pelo Batmain, ok?
 
Exemplo de Entrada	Exemplo de Saída
1
Pistoleiro	Y
 
Nanana nanannaaaaan Batman!



import java.util.Scanner;

public class DesafioDIO {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        
        int T = scan.nextInt();
        int viloesCapturados = 0;
        if (T > 0 ){
        while(viloesCapturados < T) {
            String vilao = scan.next();
            //TODO: Imprima "Y" na linha abaixo, pois já temos o vilão em mãos ;-)
            System.out.println("Y"); 
            viloesCapturados++;
        }
        }else {
            System.out.println("N");
        }       
    }
}

Faça um programa que leia 5 valores inteiros. Conte quantos destes valores digitados são pares e mostre esta informação.
Entrada
O arquivo de entrada contém 5 valores inteiros quaisquer.
Saída
Imprima a mensagem conforme o exemplo fornecido, indicando a quantidade de valores pares lidos.
 
Exemplo de Entrada	Exemplo de Saída
7
-5
6
-4
12	3 valores pares



import java.util.Scanner;

public class Problem {
    
    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(System.in);
        int quantidadePares = 0;

        for (int i = 0; i < 5; i++) {
            int n = scan.nextInt();
            
            //TODO: Implemente a condição abaixo verificando se "n" é par, ou seja, se o resto da divisão de "n" por 2 é zero.
            if ( n % 2 == 0 || n == 0) {
                quantidadePares++;
            }
        }
        System.out.printf("%d valores pares\n", quantidadePares);
    }
}


